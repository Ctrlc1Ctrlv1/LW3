1. Сукач Данило, ОМ-3
   Варіант 2

2. Постановка задачі:

   Мова виконання C++

Реалізувати лексичний аналізатор мови програмування C++. Для зберігання класів
лексем організувати таблиці. Вивести вміст таблиць після оброблення тексту
програми.

Розрізняти щонайменше такі класи лексем:
- числа (десяткові, з плаваючою крапкою, шістнадцяткові);
- рядкові та символьні константи;
- директиви препроцесора;
- коментарі;
- зарезервовані слова;
- оператори;
- розділові знаки;
- ідентифікатори.
Позначати ситуації з помилками. Наприклад, нерозпізнавані символи.
Виведення результату роботи програми:
- виведення пар <лексема, тип лексеми>;

3. Логіка алгоритму:

Основні етапи алгоритму включають:

Ініціалізацію:
Оголошення типів лексем (TokenType).
Структура Token, яка містить лексему (lexeme) та її тип (type).
Оголошення хеш-таблиць для збереження зарезервованих слів, операторів, роздільників і типів даних.

Функції:
addToken: Додає новий токен до вектора токенів.
tokenize: Аналізує вхідний текст та розбиває його на лексеми, класифікуючи їх за типами.
printTokens: Виводить усі знайдені лексеми та їх типи.
Основна програма:

Зчитує вхідний текст з файлу по 100 символів і записує в змінну "text".
Викликає функцію tokenize для аналізу тексту.
Виводить результати за допомогою функції printTokens.